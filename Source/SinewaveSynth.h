/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/


#include "WaveGenerator.h"

/** A demo synth sound that's just a basic sine wave.. */
class SineWaveSound : public SynthesiserSound
{
public:
    SineWaveSound() {}

    bool appliesToNote (int /*midiNoteNumber*/) override    { return true; }
    bool appliesToChannel (int /*midiChannel*/) override    { return true; }
};


//==============================================================================
/** A simple demo synth voice that just plays a sine wave.. */
class SineWaveVoice   : public SynthesiserVoice
{
    
    WaveGenerator myWaveGenerator;
    
public:
    SineWaveVoice()
       : currentAngle (0), angleDelta (0), level (0), tailOff (0)
    {
        
        myWaveGenerator.setMode(WaveGenerator::ANTIALIAS);
    }

    
    WaveGenerator* getWaveGenerator()
    {
        return &myWaveGenerator;
    }
    
    void setCurrentPlaybackSampleRate (const double newRate) override {
        
        // SUPER-CLASS
        SynthesiserVoice::setCurrentPlaybackSampleRate(newRate);
        
        myWaveGenerator.prepareToPlay(newRate);
        
    }
    
    bool canPlaySound (SynthesiserSound* sound) override
    {
        return dynamic_cast<SineWaveSound*> (sound) != nullptr;
    }

    void startNote (int midiNoteNumber, float velocity,
                    SynthesiserSound* /*sound*/,
                    int /*currentPitchWheelPosition*/) override
    {
        
        currentAngle = 0.0;
        level = velocity * 0.15;
        tailOff = 0.0;

        double cyclesPerSecond = MidiMessage::getMidiNoteInHertz (midiNoteNumber);
        double cyclesPerSample = cyclesPerSecond / getSampleRate();

        angleDelta = cyclesPerSample * 2.0 * double_Pi;
        
        // PITCH ::::
        myWaveGenerator.setMasterDelta(angleDelta);
        myWaveGenerator.setVolume(0);
        
    }

    void stopNote (float /*velocity*/, bool allowTailOff) override
    {
        
        myWaveGenerator.setVolume(-120);
        
        clearCurrentNote();
    }

    void pitchWheelMoved (int /*newValue*/) override
    {
        // not implemented for the purposes of this demo!
    }

    void controllerMoved (int /*controllerNumber*/, int /*newValue*/) override
    {
        // not implemented for the purposes of this demo!
    }

    void renderNextBlock (AudioSampleBuffer& outputBuffer, int startSample, int numSamples) override
    {
        
        
        AudioSampleBuffer nextBuffer(2, numSamples);
        nextBuffer.clear();
        
        myWaveGenerator.renderNextBlock(nextBuffer, numSamples);
        
        outputBuffer.copyFrom(0, startSample, *nextBuffer.getArrayOfReadPointers(), numSamples);
        outputBuffer.copyFrom(1, startSample, *nextBuffer.getArrayOfReadPointers(), numSamples);
        
    }

private:
    double currentAngle, angleDelta, level, tailOff;
};
